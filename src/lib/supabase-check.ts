import { supabase, testSupabaseConnection } from './supabase'

export async function checkSupabaseSetup() {
  console.log('üîç Verificando configura√ß√£o do Supabase...')
  
  // Verificar vari√°veis de ambiente
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  
  if (!supabaseUrl) {
    console.error('‚ùå NEXT_PUBLIC_SUPABASE_URL n√£o est√° definida')
    return false
  }
  
  if (!supabaseAnonKey) {
    console.error('‚ùå NEXT_PUBLIC_SUPABASE_ANON_KEY n√£o est√° definida')
    return false
  }
  
  console.log('‚úÖ Vari√°veis de ambiente configuradas')
  
  // Testar conex√£o
  const isConnected = await testSupabaseConnection()
  
  if (isConnected) {
    console.log('‚úÖ Conex√£o com Supabase estabelecida')
    return true
  } else {
    console.error('‚ùå Falha na conex√£o com Supabase')
    return false
  }
}

export async function testDatabaseTables() {
  try {
    console.log('üîç Testando tabelas do banco de dados...')
    
    // Testar tabela empresas
    const { data: empresas, error: empresasError } = await supabase
      .from('empresas')
      .select('count')
      .limit(1)
    
    if (empresasError) {
      console.error('‚ùå Erro ao acessar tabela empresas:', empresasError)
      return false
    }
    
    console.log('‚úÖ Tabela empresas acess√≠vel')
    
    // Testar tabela clientes
    const { data: clientes, error: clientesError } = await supabase
      .from('clientes')
      .select('count')
      .limit(1)
    
    if (clientesError) {
      console.error('‚ùå Erro ao acessar tabela clientes:', clientesError)
      return false
    }
    
    console.log('‚úÖ Tabela clientes acess√≠vel')
    
    // Testar tabela cobrancas
    const { data: cobrancas, error: cobrancasError } = await supabase
      .from('cobrancas')
      .select('count')
      .limit(1)
    
    if (cobrancasError) {
      console.error('‚ùå Erro ao acessar tabela cobrancas:', cobrancasError)
      return false
    }
    
    console.log('‚úÖ Tabela cobrancas acess√≠vel')
    
    console.log('‚úÖ Todas as tabelas est√£o acess√≠veis')
    return true
    
  } catch (error) {
    console.error('‚ùå Erro inesperado ao testar tabelas:', error)
    return false
  }
}

export async function runFullCheck() {
  console.log('üöÄ Iniciando verifica√ß√£o completa do Supabase...')
  
  const setupOk = await checkSupabaseSetup()
  if (!setupOk) {
    console.error('‚ùå Configura√ß√£o do Supabase falhou')
    return false
  }
  
  const tablesOk = await testDatabaseTables()
  if (!tablesOk) {
    console.error('‚ùå Teste das tabelas falhou')
    return false
  }
  
  console.log('‚úÖ Verifica√ß√£o completa conclu√≠da com sucesso!')
  return true
} 